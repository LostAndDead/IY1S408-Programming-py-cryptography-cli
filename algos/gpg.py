import getpass
import random
import string

import gnupg


class GPG:

    def __init__(self, main):
        self.main = main

    def generate_key(self, args):
        try:
            if (args.keyRing):
                gpg = gnupg.GPG(gnupghome=args.keyring)
            else:
                gpg = gnupg.GPG()
        except:
            print("GPG not found, please install GPG and try again. (https://gnupg.org/download/)")
            exit(1)
        
        keys = gpg.list_keys()
        if (keys):
            for key in keys:
                if (key['uids'][0] == f'Autogenerated Key <%s>' % args.key):
                    print("A key with this ID already exists, please use a different ID or delete the existing key.")
                    exit(1)
        
        if (args.passphrase):
            password = args.passphrase.encode('utf-8')
        else:
            randomize = input("Randomize passphrase? (y/n): ")
            if (randomize == 'y'):
                characters = string.ascii_letters + string.digits + string.punctuation
                password = ''.join(random.choice(characters) for i in range(16))
                print("Passphrase: " + password + "\n(Please remember this passphrase, it will not be shown again)")
            else:
                password = getpass.getpass("Key: ")

        input_data = gpg.gen_key_input(
            name_email=args.key,
            passphrase=password,
            key_type='RSA',
            key_length=4096,
        )
        
        print("Generating key...")
        key = gpg.gen_key(input_data)
        print("Key generated with ID " + args.key)
    
    def encrypt(self, args):
        if (args.input):
            print("Encrypting " + args.input + " with " + args.algorithm + " algorithm")
            try:
                if (args.keyRing):
                    gpg = gnupg.GPG(gnupghome=args.keyring)
                else:
                    gpg = gnupg.GPG()
            except:
                print("GPG not found, please install GPG and try again. (https://gnupg.org/download/)")
                exit(1)
            if(args.outputFile):
                status = gpg.encrypt(args.input, [args.key], output=args.outputFile)
                print("Encrypted saved to " + args.outputFile)
                self.main.verboseLog("Ok?: " + str(status.ok))
                self.main.verboseLog("Status: " + str(status.status))
            else:
                status = gpg.encrypt(args.input, [args.key])
                print(status.data)
                self.main.verboseLog("Ok?: " + str(status.ok))
                self.main.verboseLog("Status: " + str(status.status))
            if (not status.ok):
                print("Error: " + status.status)
                self.main.verboseLog("Status: " + str(status.stderr))
        elif (args.inputFile):
            print("Encrypting " + args.inputFile + " with " + args.algorithm + " algorithm")
            try:
                gpg = gnupg.GPG()
            except:
                print("GPG not found, please install GPG and try again. (https://gnupg.org/download/)")
                exit(1)
            if(args.outputFile):
                with open (args.inputFile, "rb") as f:
                    status = gpg.encrypt_file(f, [args.key], output=args.outputFile)
                    print("Encrypted saved to " + args.outputFile)
                    self.main.verboseLog("Ok?: " + str(status.ok))
                    self.main.verboseLog("Status: " + str(status.status))
            else:
                with open (args.inputFile, "rb") as f:
                    status = gpg.encrypt_file(f, [args.key])
                    print(status.data)
                    self.main.verboseLog("Ok?: " + str(status.ok))
                    self.main.verboseLog("Status: " + str(status.status))
            if (not status.ok):
                print("Error: " + status.status)
                self.main.verboseLog("Status: " + str(status.stderr))
    
    def decrypt(self, args):
        print("GPG relies on a GNUP agent, most of these agents cache the passphrase for a certain amount of time. So once you decrypt a file even an incorrect passphrase will decrypt the file for a while.")
        if (args.passphrase):
            passphrase = args.passphrase.encode('utf-8')
        else:
            passphrase = getpass.getpass("Enter passphrase: ")
        if (args.input):
            print("Decrypting " + args.input + " with " + args.algorithm + " algorithm")
            try:
                if (args.keyRing):
                    gpg = gnupg.GPG(gnupghome=args.keyring)
                else:
                    gpg = gnupg.GPG()
            except:
                print("GPG not found, please install GPG and try again. (https://gnupg.org/download/)")
                exit(1)
            if(args.outputFile):
                status = gpg.decrypt(args.input, passphrase=passphrase, output=args.outputFile)
                print("Decrypting saved to " + args.outputFile)
                self.main.verboseLog("Ok?: " + str(status.ok))
                self.main.verboseLog("Status: " + str(status.status))
            else:
                status = gpg.decrypt(args.input, passphrase=passphrase)
                print(status.data)
                self.main.verboseLog("Ok?: " + str(status.ok))
                self.main.verboseLog("Status: " + str(status.status))
            if (not status.ok):
                print("Error: " + status.status)
                self.main.verboseLog("Status: " + str(status.stderr))
        elif (args.inputFile):
            print("Decrypting " + args.inputFile + " with " + args.algorithm + " algorithm")
            try:
                gpg = gnupg.GPG()
            except:
                print("GPG not found, please install GPG and try again. (https://gnupg.org/download/)")
                exit(1)
            if(args.outputFile):
                with open (args.inputFile, "rb") as f:
                    status = gpg.decrypt_file(f, passphrase=passphrase, output=args.outputFile)
                    print("Decrypting saved to " + args.outputFile)
                    self.main.verboseLog("Ok?: " + str(status.ok))
                    self.main.verboseLog("Status: " + str(status.status))
            else:
                with open (args.inputFile, "rb") as f:
                    status = gpg.decrypt_file(f, passphrase=passphrase)
                    print(status.data)
                    self.main.verboseLog("Ok?: " + str(status.ok))
                    self.main.verboseLog("Status: " + str(status.status))
            if (not status.ok):
                print("Error: " + status.status)
                self.main.verboseLog("Status: " + str(status.stderr))
